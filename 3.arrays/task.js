//=====task1=====//
function compareArrays(arr1, arr2) {
  /*Первый вариант: сравнение элементов и их позиций массива1 и массива2, 
  используя метод every, выступающей функцией высшего порядка по отношению к compareArrays()
  Комментарий преподавателя:
  Никогда не используйте перечисление элементов вне массива или аргументов функции. 
  Такое перечисление возвращает последнее значение. То есть, обращение i, pos возвращает просто pos, а следовательно, 
  обращение к arr1[i,pos] эквивалетно arr1[pos]. Так же, в первом задании, оба массива нет смысла перебирать. 
  Массивы будут одинаковыми, если длины массивов будут одинаковыми И каждый элемент будет совпадать с соответствующим 
  элементом другого массива: return arr1.length === arr2.length && arr1.every((item, index) => item === arr2[index]);*/
  //return arr1.every((i,pos) => arr1[i,pos] === arr2[i,pos]) && arr2.every((i,pos) => arr1[i,pos] === arr2[i,pos]); 
  
  return arr1.length === arr2.length && arr1.every((item, index) => item === arr2[index]);

  // boolean
}

//=====task2=====//
function advancedFilter(arr) {
  let resultArr;
  resultArr = arr.filter(i => i > 0).filter(i => i % 3 === 0).map(i => i * 10); /*положительные числа, кратные 3 и возвращюащие 
  новый массив с отобранными числами, умноженными на 10, используя метод перебора массива filter и метод его преобразования map*/
  
  return resultArr; // array
}
